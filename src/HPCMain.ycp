/**************
FILE          : HPCMain.ycp
***************
PROJECT       : YaST2 - Yet another Setup Tool
              :
AUTHOR        : Thomas Hofmann <thofmann@suse.de>
              :
BELONGS TO    : YaST2 - HPC Setup Module
              :
DESCRIPTION   : A module for setting up a HPC-Cluster-Scheduling System
              : with necessary environment
              :
STATUS        : Development
**************/
/*! \brief YaST2 - HPC interface (UI part)
*
* File:        HPCMain.ycp
* Package:     hpc Configuration
* Summary:     Main Module started if yast2 hpc is called
* Authors:     Thomas Hofmann <thofmann@suse.de>
*/
{ //begin
textdomain "hpc";

import "Mode";
import "Stage";
import "Report";
import "Wizard";
import "Popup";
import "Confirm";
import "Progress";
import "CommandLine";

import "HPCControl";
import "NfsServer";

include "hpc/HPCDialog.ycp";

Wizard::OpenNextBackDialog();


//------------------------------------------
//initial settings
//------------------------------------------




list<string> requiredPacs = [
                "OpenPBS", "OpenPBS-clients", "OpenPBS-server", "OpenPBS-scheduler", "OpenPBS-utils", "openssh", "nfs-utils", "ypbind", "ypserv", "yp-tools", "nmap", "dhcp-server", "pdsh"
        ];



//------------------------------------------
// show initialization Progress ...
//------------------------------------------

	string window_title = _("Initializing HPC-Setup");     // window title
        string progress_title = _(" ");                        // progress title
        integer length = 5;                              // length
        list<string> stages = [
            // progress stage, text in dialog (short) (infinitive)
            _("Check required packages"),
            // progress stage, text in dialog (short) (infinitive)
            _("Check required services"),
            // progress stage, text in dialog (short) (infinitive)
            _("Check required files"),
            // progress stage, text in dialog (short) (infinitive)
            _("Check SSH settings"),
            // progress stage, text in dialog (short) (infinitive)
            _("Read firewall settings"),
         ];
        list<string> titles = [
            // progress step, text in dialog (short)
            _("Checking required packages..."),
            // progress step, text in dialog (short)
            _("Checking required services..."),
            // progress step, text in dialog (short)
            _("Checking required files..."),
            // progress step, text in dialog (short)
            _("Checking SSH settings..."),
            // progress step, text in dialog (short)
            _("Reading firewall settings..."),
         ];
        string help = _("progress help text");
        Progress::New(
                        window_title,
                        progress_title,
                        length,
                        stages,
                        titles,
                        help
        );



//------------------------------------------
// check required Packages and install...
//------------------------------------------
Progress::NextStage();

if ( HPCControl::installPackages( requiredPacs ) == nil)
{
	return `nil;
}


//---------------------------------------------------------
// check required services if running & start if necessary
//---------------------------------------------------------
Progress::NextStage();

{

// check pbs_server

SCR::Execute(.target.bash, "echo $HOST > /var/spool/pbs/default_server");

boolean started = false;
boolean HPCServices = HPCControl::HPCServiceCheck( "pbs_server");


	if ( HPCServices != true )
	{
		started = HPCControl::HPCServiceStart("pbs_server");
	}
	else
	{
	started = true;
	y2milestone("------------pbs_server is running------------");
	}

	if (started == false)
	{
	y2milestone("------------pbs_server could not be started------------");
	return `nil;
	}

//check pbs_scheduler
started = false;
HPCServices = HPCControl::HPCServiceCheck( "pbs_sched");

	if ( HPCServices != true )
	{
		started = HPCControl::HPCServiceStart("pbs_sched");
	}
	else
	{
	started = true;
	y2milestone("------------pbs_scheduler is running------------");
	}

	if (started == false)
	{
	y2milestone("------------pbs_scheduler could not be started------------");
	return `nil;
	}

}


//------------------------------------------
// check required files
//------------------------------------------
Progress::NextStage();


//if return value != 0 then UI::OpenDialog mit return value!

// rÃ¼ckgabe-werte: error-msg, oder true

if ( HPCControl::HPCQueueConfig() == nil )
        {
        map out = (map)SCR::Execute (.target.bash_output, "/opt/pbs/bin/qmgr -c \042 print server \042 > /tmp/queue.conf");
        string error = (string)out["stderr"]:nil;
        UI::OpenDialog(
                        `VBox(  `Label(_("The Following Error caused the installation to abort:")),
                                `Label(error),
                                `PushButton(_("&Abort Installation"))
                             )
                      );

        UI::UserInput();
        y2milestone ("--------error-loop--------");
        UI::CloseDialog();
	return `nil;
        };


if ( HPCControl::HPCSchedConfig() == nil )
        {
        map out = (map)SCR::Execute (.target.bash_output, "/opt/pbs/bin/qmgr -c \042 print server \042 > /tmp/queue.conf");
        string error = (string)out["stderr"]:nil;
        UI::OpenDialog(
                        `VBox(  `Label(_("The Following Error caused the installation to abort:")),
                                `Label(error),
                                `PushButton(_("&Abort Installation"))
                             )
                      );

        UI::UserInput();
        y2milestone ("--------error-loop--------");
        UI::CloseDialog();
	return `nil;
        };

if( SCR::Read(.target.string, "/etc/sysconfig/hpc.cfg") == nil)
	{
		SCR::Execute(.target.bash,"echo \042##### DO NOT EDIT THIS FILE! #####\042 >> /etc/sysconfig/hpc.cfg");
		SCR::Execute(.target.bash,"echo \042SHAREPOINT:/hpccommon:*:rw,root_squash,sync\042 >> /etc/sysconfig/hpc.cfg");
		SCR::Execute(.target.bash,"echo \042HOMEPOINT:/home:*:rw,root_squash,sync\042 >> /etc/sysconfig/hpc.cfg");
		y2milestone("################################## hpc.cfg is created manually ########################");
	}


	map nfs = $[
			"mountpoint": deletechars((string)(((map)SCR::Execute(.target.bash_output,"grep -w SHAREPOINT /etc/sysconfig/hpc.cfg | cut -f2 -d\042:\042"))["stdout"]:"n.a."),"\n"),
			"hosts": deletechars((string)(((map)SCR::Execute(.target.bash_output,"grep -w SHAREPOINT /etc/sysconfig/hpc.cfg | cut -f3 -d\042:\042"))["stdout"]:"n.a."),"\n"),
			"options": deletechars((string)(((map)SCR::Execute(.target.bash_output,"grep -w SHAREPOINT /etc/sysconfig/hpc.cfg | cut -f4 -d\042:\042"))["stdout"]:"n.a."),"\n()"),
			"homepoint": deletechars((string)(((map)SCR::Execute(.target.bash_output,"grep -w HOMEPOINT /etc/sysconfig/hpc.cfg | cut -f2 -d\042:\042"))["stdout"]:"n.a."),"\n"),
			"hhosts": deletechars((string)(((map)SCR::Execute(.target.bash_output,"grep -w HOMEPOINT /etc/sysconfig/hpc.cfg | cut -f3 -d\042:\042"))["stdout"]:"n.a."),"\n"),
			"hoptions": deletechars((string)(((map)SCR::Execute(.target.bash_output,"grep -w HOMEPOINT /etc/sysconfig/hpc.cfg | cut -f4 -d\042:\042"))["stdout"]:"n.a."),"\n()"),
		];

y2milestone("############################NFSMAP %1:",nfs);
	if (SCR::Execute(.target.bash, "grep -e auto.hpc /var/yp/Makefile")!=0)
	{
	SCR::Execute(.target.bash, "patch -s /var/yp/Makefile /usr/lib/YaST2/bin/Makefile.patch");
	}

	if (SCR::Execute(.target.bash, "grep -e auto.home /etc/auto.master")!=0)
	{
	SCR::Execute(.target.bash, "echo -e \"/home \t\t auto.home\" >> /etc/auto.master");
	}

	if (SCR::Execute(.target.bash, "grep -e auto.hpc /etc/auto.master")!=0)
	{
	SCR::Execute(.target.bash, "echo -e \"/hpc \t\t auto.hpc\" >> /etc/auto.master");
	}

// dhcpd.conf

	if (SCR::Execute(.target.bash, "grep -e HPC /etc/dhcpd.conf")!=0)
	{
	SCR::Execute(.target.bash, "/usr/lib/YaST2/bin/dhcpd.hpc.sh");
	}

//------------------------------------------
// check SSH settings
//------------------------------------------
Progress::NextStage();

	SCR::Execute(.target.bash, "/usr/lib/YaST2/bin/ssh_hpc.sh");



//------------------------------------------
// check Firewall settings
//------------------------------------------
Progress::NextStage();

	boolean firewallon = HPCControl::HPCServiceCheck("SuSEfirewall2_init");

	y2milestone("firewallon = %1", firewallon);

	term firewallsettings = HPCControl::FWsettings(firewallon);


Progress::Finish();


//--------------------------------
// arrange tab-structure
//--------------------------------

term current_tab = Server_Tab();

string current_help = HPCServerSetupDialogHelpText();

term setup_dialog = `VBox(
			 `DumbTab( [
				    `item(`id(`server  ), _("&Server"), true  ), //initially Server-Tab selected
				 //   `item(`id(`services  ), _("Ser&vices") ),
				    `item(`id(`nodes ), _("&Nodes") )
				   ],
				   `HCenter(
					 `Top(
					      `HVSquash(
							`VBox(
							      `VSpacing(0.3),
							      `HBox(
								    `HSpacing(1),
								    `ReplacePoint(`id(`tabContents ), current_tab )
								   )
							     )
							)
					      )
					 )
				 )
			);

//--------------------------------
// starting with a wizard
//--------------------------------
CommonWiz(nfs,firewallsettings);



//--------------------------------
// Event loop
//--------------------------------

any ret = nil;

boolean abort = false;

string sched_edit = nil;

// dynamically create script to install new nodes
string createinstallscript = "/usr/lib/YaST2/bin/installhost.sh";
SCR::Execute(.target.bash, createinstallscript);

define list ndscontent = [];

// string sharedir = "/hpccommon";

repeat {
	ret = Wizard::UserInput();

	if ( ret == `nextnis )
		{
			//Query settings
			map nfsnew = $[
			"mountpoint": (string)UI::QueryWidget(`id(`mountpoint), `Value),
			"hosts": (string)UI::QueryWidget(`id(`hosts), `Value),
			"options": (string)UI::QueryWidget(`id(`options), `Value),
			"homepoint": (string)UI::QueryWidget(`id(`homepoint), `Value),
			"hhosts": (string)UI::QueryWidget(`id(`hhosts), `Value),
			"hoptions": (string)UI::QueryWidget(`id(`hoptions), `Value)
					];
			string window_title = _("Writing NFS Data");     // window title
		        string progress_title = _(" ");                        // progress title
		        integer length = 2;                              // length
		        list<string> stages = [
		            // progress stage, text in dialog (short) (infinitive)
		            _("Write NFS Data"),
			    _("Restart NFS-Server"),
		         ];
		        list<string> titles = [
		            // progress step, text in dialog (short)
		            _("Writing NFS Data ..."),
			    _("Restarting NFS-Server ..."),
		         ];
		        string help = _("progress help text");
		        Progress::New(
		                        window_title,
		                        progress_title,
		                        length,
		                        stages,
		                        titles,
		                        help
		        );


			Progress::NextStage();

			HPCControl::NFSmap(nfs, nfsnew);
			nfs = nfsnew;

			// NFS-SERVER RESTART

			HPCControl::HPCServiceRestart( "nfsserver" );

			Progress::Finish();

			WFM::CallFunction("nis_server");

			WFM::CallFunction("dhcp-server");

			// parse dhcp-configured hosts to /etc/hosts
			SCR::Execute(.target.bash, "/usr/lib/YaST2/bin/DHCPtoHosts.pl");
			// rebuild nis-maps
			SCR::Execute(.target.bash, "make -C /var/yp");
			y2milestone("Â§Â§Â§Â§Â§Â§Â§Â§Â§Â§Â§Â§Â§Â§Â§Â§Â§Â§Â§Â§Â§Â§Â§Â§Â§ HIER Â§Â§Â§Â§Â§Â§Â§Â§Â§Â§Â§Â§Â§Â§Â§Â§Â§Â§Â§Â§Â§Â§Â§Â§Â§Â§Â§Â§");
			{
			//------------------------------------------
			// collect node information
			//------------------------------------------
			string window_title = _("Collecting Nodes information");     // window title
			string progress_title = _(" ");                        // progress title
			integer length = 2;                              // length
			list<string> stages = [
			    // progress stage, text in dialog (short) (infinitive)
			    _("Collect node information"),
			 ];
			list<string> titles = [
			    // progress step, text in dialog (short)
			    _("Collecting node information..."),
			 ];
			string help = _("progress help text");
			Progress::New(
					window_title,
					progress_title,
					length,
					stages,
					titles,
					help
			);

			Progress::NextStage();

			ndscontent = HPCControl::nodes();
			y2milestone("++++++++++++++++Nodescontent: %1",ndscontent);
			 if (ndscontent == nil)
				{
				UI::OpenDialog(
						`VBox(  `Label(_("There were no Hosts to contact for the YaST-Module:")),
						       `PushButton(_("&Abort Installation"))
						      )
						);
				UI::UserInput();
				y2milestone("-------- didn't find any hosts ----------");
				UI::CloseDialog();
				return `nil;
				};
			Progress::Finish();
			SCTabs(setup_dialog);
			}
		}

//	if ( ret == `backnfs )
//	{
//	CommonWiz(nfs,firewallsettings);
//	}

//	if ( ret == `abortnis )
//	{
//	preDHCPconfig();
//	}

//	if ( ret == `backnis )
//	{
//	preNISconfig();
//	}

//	if ( ret == `confignis )
//	{
//	WFM::CallFunction("nis_server");
//	preDHCPconfig();
//	}

//	if ( ret == `configdhcp )
//	{
//	WFM::CallFunction("dhcp-server");
//	preSCTabs(firewallsettings);
//	}

//	if ( ret == `abortdhcp )
//	{
//	preSCTabs(firewallsettings);
//	}

	if ( ret == `backdhcp )
	{
	CommonWiz(nfs,firewallsettings);
	}

	if ( ret == `configSC )
	{
	//------------------------------------------
	// collect node information
	//------------------------------------------
        string window_title = _("Collecting Nodes information");     // window title
        string progress_title = _(" ");                        // progress title
        integer length = 2;                              // length
        list<string> stages = [
            // progress stage, text in dialog (short) (infinitive)
            _("Collect node information"),
         ];
        list<string> titles = [
            // progress step, text in dialog (short)
            _("Collecting node information..."),
         ];
        string help = _("progress help text");
        Progress::New(
                        window_title,
                        progress_title,
                        length,
                        stages,
                        titles,
                        help
        );

	Progress::NextStage();

	ndscontent = HPCControl::nodes();
	y2milestone("++++++++++++++++Nodescontent: %1",ndscontent);
	 if (ndscontent == nil)
		{
		UI::OpenDialog(
	                        `VBox(  `Label(_("There were no Hosts to contact for the YaST-Module:")),
	                               `PushButton(_("&Abort Installation"))
	                              )
				);
		UI::UserInput();
		y2milestone("-------- didn't find any hosts ----------");
		UI::CloseDialog();
		return `nil;
		};
	Progress::Finish();
	SCTabs(setup_dialog);
	}

	if ( ret == `backSC )
	{
	preSCTabs(firewallsettings);
	}

	if ( ret == `abortSC )
	{
	SCTabs(setup_dialog);
	}

	if	( current_tab == Advanced_Tab() )
	{
		sched_edit = (string)UI::QueryWidget(`id(`ExpertsConfiguration), `Value);

        // enable save-Button
		if      ( sched_edit != nil)
		{
			UI::ChangeWidget(`saveconfig, `Enabled, true);
		}

	// save edited configuration file
	        if      ( ret == `saveconfig )
	        {
	                HPCControl::HPCwriteSchedConfig(sched_edit);
	                UI::ChangeWidget(`saveconfig, `Enabled, false);
	                y2milestone("-------------- saving scheduler config ---------------");
	        }
	}

	// Exit Event Loop
	if	( ret == `cancel || ret == `abort )
	{
		abort = reallycancel();
		if (abort == true) break;
	}

	// Call Server-Tab
	if	( ret == `server || ret == `ssettings )
	{
		current_tab = Server_Tab();
		UI::ReplaceWidget(`tabContents, current_tab);
		Wizard::SetHelpText( HPCServerSetupDialogHelpText() );
	}


	// Call Advanced Settings
	if	( ret == `asettings )
	{
		current_tab = Advanced_Tab();
		UI::ReplaceWidget(`tabContents, current_tab);
		Wizard::SetHelpText( HPCAdvancedSetupDialogHelpText() );
	}


	// Call Nodes-Tab
	if	( ret == `nodes )
	{
		y2milestone("NDSCONTENT: %1", ndscontent);
		current_tab = Nodes_Tab(ndscontent);
		UI::ReplaceWidget(`tabContents, current_tab);
		HPCControl::Buttonstate(); // en-/disable buttons
		Wizard::SetHelpText( HPCNodesSetupDialogHelpText() );
	}

	// install ssh on node
	if	( ret == `copyssh )
	{
		ndscontent = HPCControl::SSHcopy();
	}

	// Add node to cluster
	if	( ret == `addnode )
	{
		ndscontent = HPCControl::AddClusterNode();
	}

	// Remove node from cluster
	if	( ret == `remnode )
	{
		ndscontent = HPCControl::RemoveClusterNode();
	}

	// Inactivate / Activate Buttons in nodes-tab

	if	( ret == `nodestable )
	{
		HPCControl::Buttonstate();
	}

	// Query Tree Items

	if	( ret == `queues )
	{
		HPCControl::QueryTree();
	}

	// Debugging stuff

//	y2milestone ("... choice is %1 ...", choice);

	y2milestone ("... ret is %1 ...", ret);

	y2milestone ("..................UI-Loop passed ...................");

    } until ( false);

Wizard::CloseDialog();

} //end


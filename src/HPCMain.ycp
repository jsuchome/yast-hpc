/**************
FILE          : HPCMain.ycp
***************
PROJECT       : YaST2 - Yet another Setup Tool
              :
AUTHOR        : Thomas Hofmann <thofmann@suse.de>
              :
BELONGS TO    : YaST2 - HPC Setup Module
              :
DESCRIPTION   : A module for setting up a HPC-Cluster-Scheduling System
              : with necessary environment
              :
STATUS        : Development
**************/
/*! \brief YaST2 - HPC interface (UI part)
*
* File:        HPCMain.ycp
* Package:     hpc Configuration
* Summary:     Main Module started if yast2 hpc is called
* Authors:     Thomas Hofmann <thofmann@suse.de>
*/
{ //begin
textdomain "hpc";

import "Mode";
import "Stage";
import "Report";
import "Wizard";
import "Popup";
import "Confirm";
import "Progress";
import "CommandLine";

import "HPCControl";
import "NfsServer";

include "hpc/HPCDialog.ycp";


// start Module as a Wizard
Wizard::OpenNextBackDialog();


//------------------------------------------
//initial settings
//------------------------------------------




//------------------------------------------
// show initialization Progress ...
//------------------------------------------

	string window_title = _("Initializing HPC-Setup");     // window title
        string progress_title = _(" ");                        // progress title
        integer length = 5;                              // length
        list<string> stages = [
            // progress stage, text in dialog (short) (infinitive)
            _("Check required packages"),
            // progress stage, text in dialog (short) (infinitive)
            _("Check required services"),
            // progress stage, text in dialog (short) (infinitive)
            _("Check required files"),
            // progress stage, text in dialog (short) (infinitive)
            _("Check SSH settings"),
            // progress stage, text in dialog (short) (infinitive)
            _("Read firewall settings"),
         ];
        list<string> titles = [
            // progress step, text in dialog (short)
            _("Checking required packages..."),
            // progress step, text in dialog (short)
            _("Checking required services..."),
            // progress step, text in dialog (short)
            _("Checking required files..."),
            // progress step, text in dialog (short)
            _("Checking SSH settings..."),
            // progress step, text in dialog (short)
            _("Reading firewall settings..."),
         ];
        Progress::New(
                        window_title,
                        progress_title,
                        length,
                        stages,
                        titles,
			HPCMessages::initProgresshelpText
        );



//------------------------------------------
// check required Packages and install...
//------------------------------------------
// Module requirements

list<string> requiredPacs = [
                "OpenPBS", "OpenPBS-clients", "OpenPBS-server", "OpenPBS-scheduler", "OpenPBS-utils", "openssh", "nfs-utils", "ypbind", "ypserv", "yp-tools", "nmap", "dhcp-server", "yast2-dhcp-server", "pdsh"
        ];

Progress::NextStage();

if ( HPCControl::installPackages( requiredPacs ) == nil)
{
	return `nil;
}


//---------------------------------------------------------
// check required services if running & start if necessary
//---------------------------------------------------------
Progress::NextStage();

{

// check pbs_server

SCR::Execute(.target.bash, "echo $HOST > /var/spool/pbs/default_server");

boolean started = false;
boolean HPCServices = HPCControl::HPCServiceCheck( "pbs_server");


	if ( HPCServices != true )
	{
		started = HPCControl::HPCServiceStart("pbs_server");
	}
	else
	{
	started = true;
	}

	if (started == false)
	{
	return `nil;
	}

//check pbs_scheduler
started = false;
HPCServices = HPCControl::HPCServiceCheck( "pbs_sched");

	if ( HPCServices != true )
	{
		started = HPCControl::HPCServiceStart("pbs_sched");
	}
	else
	{
	started = true;
	}

	if (started == false)
	{
	return `nil;
	}

}


//------------------------------------------
// check required files
//------------------------------------------
Progress::NextStage();

//if return value != 0 then UI::OpenDialog mit return value!

// return-values: error-msg, or true

if ( HPCControl::HPCQueueConfig() == nil )
        {
        map out = (map)SCR::Execute (.target.bash_output, "/opt/pbs/bin/qmgr -c \042 print server \042 > /tmp/queue.conf");
        string error = (string)out["stderr"]:nil;
        UI::OpenDialog(
                        `VBox(  `Label(HPCMessages::errorinstallationabort),
                                `Label(error),
                                `PushButton(_("&Abort Installation"))
                             )
                      );

        UI::UserInput();
        y2milestone ("--------error-loop--------");
        UI::CloseDialog();
	return `nil;
        };


if ( HPCControl::HPCSchedConfig() == nil )
        {
        map out = (map)SCR::Execute (.target.bash_output, "/opt/pbs/bin/qmgr -c \042 print server \042 > /tmp/queue.conf");
        string error = (string)out["stderr"]:nil;
        UI::OpenDialog(
                        `VBox(  `Label(HPCMessages::errorinstallationabort),
                                `Label(error),
                                `PushButton(_("&Abort Installation"))
                             )
                      );

        UI::UserInput();
        y2milestone ("--------error-loop--------");
        UI::CloseDialog();
	return `nil;
        };

// create /etc/sysconfig/hpc.cfg for later check which directories exporting hpc-data

if( SCR::Read(.target.string, "/etc/sysconfig/hpc.cfg") == nil)
	{
		SCR::Execute(.target.bash,"echo \042##### DO NOT EDIT THIS FILE! #####\042 >> /etc/sysconfig/hpc.cfg");
		SCR::Execute(.target.bash,"echo \042SHAREPOINT:/hpccommon:*:rw,root_squash,sync\042 >> /etc/sysconfig/hpc.cfg");
		SCR::Execute(.target.bash,"echo \042HOMEPOINT:/home:*:rw,root_squash,sync\042 >> /etc/sysconfig/hpc.cfg");
		y2milestone("################################## hpc.cfg is created manually ########################");
	}


	map nfs = $[
			"mountpoint": deletechars((string)(((map)SCR::Execute(.target.bash_output,"grep -w SHAREPOINT /etc/sysconfig/hpc.cfg | cut -f2 -d\042:\042"))["stdout"]:"n.a."),"\n"),
			"hosts": deletechars((string)(((map)SCR::Execute(.target.bash_output,"grep -w SHAREPOINT /etc/sysconfig/hpc.cfg | cut -f3 -d\042:\042"))["stdout"]:"n.a."),"\n"),
			"options": deletechars((string)(((map)SCR::Execute(.target.bash_output,"grep -w SHAREPOINT /etc/sysconfig/hpc.cfg | cut -f4 -d\042:\042"))["stdout"]:"n.a."),"\n()"),
			"homepoint": deletechars((string)(((map)SCR::Execute(.target.bash_output,"grep -w HOMEPOINT /etc/sysconfig/hpc.cfg | cut -f2 -d\042:\042"))["stdout"]:"n.a."),"\n"),
			"hhosts": deletechars((string)(((map)SCR::Execute(.target.bash_output,"grep -w HOMEPOINT /etc/sysconfig/hpc.cfg | cut -f3 -d\042:\042"))["stdout"]:"n.a."),"\n"),
			"hoptions": deletechars((string)(((map)SCR::Execute(.target.bash_output,"grep -w HOMEPOINT /etc/sysconfig/hpc.cfg | cut -f4 -d\042:\042"))["stdout"]:"n.a."),"\n()"),
		];

	// insert automounter-option in yp-Makefile if automounter-maps are not included
	if (SCR::Execute(.target.bash, "grep -e auto.hpc /var/yp/Makefile")!=0)
	{
	SCR::Execute(.target.bash, "patch -s /var/yp/Makefile /usr/lib/YaST2/bin/Makefile.patch");
	}

	// create auto.home map
	if (SCR::Execute(.target.bash, "grep -e auto.home /etc/auto.master")!=0)
	{
	SCR::Execute(.target.bash, "echo -e \"/home \t\t auto.home\" >> /etc/auto.master");
	}

	// create auto.hpc map
	if (SCR::Execute(.target.bash, "grep -e auto.hpc /etc/auto.master")!=0)
	{
	SCR::Execute(.target.bash, "echo -e \"/hpc \t\t auto.hpc\" >> /etc/auto.master");
	}

	// create group "hpc" in dhcpd.conf

	if (SCR::Execute(.target.bash, "grep -e HPC /etc/dhcpd.conf")!=0)
	{
	SCR::Execute(.target.bash, "/usr/lib/YaST2/bin/dhcpd.hpc.sh");
	}

//------------------------------------------
// check SSH settings
//------------------------------------------
Progress::NextStage();

	SCR::Execute(.target.bash, "/usr/lib/YaST2/bin/ssh_hpc.sh");



//------------------------------------------
// check Firewall settings
//------------------------------------------
Progress::NextStage();

	boolean firewallon = HPCControl::HPCServiceCheck("SuSEfirewall2_init");

	y2milestone("firewallon = %1", firewallon);

	term firewallsettings = HPCControl::FWsettings(firewallon);


Progress::Finish();


//--------------------------------
// arrange tab-structure
//--------------------------------

term current_tab = Server_Tab();

string current_help = HPCServerSetupDialogHelpText();

term setup_dialog = `VBox(
			 `DumbTab( [
				    `item(`id(`server  ), _("&Server"), true  ), //initially Server-Tab selected
				 //   `item(`id(`services  ), _("Ser&vices") ),
				    `item(`id(`nodes ), _("&Nodes") )
				   ],
				   `HCenter(
					 `Top(
					      `HVSquash(
							`VBox(
							      `VSpacing(0.3),
							      `HBox(
								    `HSpacing(1),
								    `ReplacePoint(`id(`tabContents ), current_tab )
								   )
							     )
							)
					      )
					 )
				 )
			);

//--------------------------------
// starting with a wizard
//--------------------------------
CommonWiz(nfs,firewallsettings);

boolean NISconfigured = (boolean)UI::QueryWidget(`id(`NISconfigured), `Value);
boolean DHCPconfigured = (boolean)UI::QueryWidget(`id(`DHCPconfigured), `Value);


//--------------------------------
// Event loop
//--------------------------------

any ret = nil;

boolean abort = false;

string sched_edit = nil;

string itemname = nil;

// dynamically create script to install new nodes
string createinstallscript = "/usr/lib/YaST2/bin/installhost.sh";
SCR::Execute(.target.bash, createinstallscript);

define list ndscontent = [];


repeat {
	ret = Wizard::UserInput();

	NISconfigured = (boolean)UI::QueryWidget(`id(`NISconfigured), `Value);
	DHCPconfigured = (boolean)UI::QueryWidget(`id(`DHCPconfigured), `Value);

	if ( ret == `nextnis )
	{
		nfs=HPCControl::QuerynWriteNFSsettings(nfs);

		// Skip NIS-Configuration if not necessary
		if (NISconfigured != true)
		{
			WFM::CallFunction("nis_server");
		}

		// Skip DHCP- Configuration if not necessary
		if (DHCPconfigured != true)
		{
			WFM::CallFunction("dhcp-server");
		}

		// parse dhcp-configured hosts to /etc/hosts
		SCR::Execute(.target.bash, "/usr/lib/YaST2/bin/DHCPToHosts.pl");

		// rebuild nis-maps
		SCR::Execute(.target.bash, "make -C /var/yp");

		// Wait for nodes to boot

		preSCTabs();

	}


	if ( ret == `backtonfs )
	{
	CommonWiz(nfs,firewallsettings);
	}

	if ( ret == `configSC )
	{

	ndscontent = HPCControl::nodes();

	SCTabs(setup_dialog);
	}

	if ( ret == `backSC )
	{
	preSCTabs();
	}

	if ( ret == `abortSC )
	{
	SCTabs(setup_dialog);
	}

	if	( current_tab == Advanced_Tab() )
	{
		sched_edit = (string)UI::QueryWidget(`id(`ExpertsConfiguration), `Value);

        // enable save-Button
		if      ( sched_edit != nil)
		{
			UI::ChangeWidget(`saveconfig, `Enabled, true);
		}

	// save edited configuration file
	        if      ( ret == `saveconfig )
	        {
	                HPCControl::HPCwriteSchedConfig(sched_edit);
	                UI::ChangeWidget(`saveconfig, `Enabled, false);
	        }
	}

	// Exit Event Loop
	if	( ret == `cancel || ret == `abort )
	{
		abort = reallycancel();
		if (abort == true) break;
	}

	// Call Server-Tab
	if	( ret == `server || ret == `ssettings )
	{
		current_tab = Server_Tab();
		UI::ReplaceWidget(`tabContents, current_tab);
		Wizard::SetHelpText( HPCServerSetupDialogHelpText() );
		Wizard::SetBackButton(`backtonfs, _("Back"));
	}


	// Call Advanced Settings
	if	( ret == `asettings )
	{
		current_tab = Advanced_Tab();
		UI::ReplaceWidget(`tabContents, current_tab);
		Wizard::SetHelpText( HPCAdvancedSetupDialogHelpText() );
		Wizard::SetBackButton(`server, _("Back"));
	}


	// Call Nodes-Tab
	if	( ret == `nodes )
	{
		current_tab = Nodes_Tab(ndscontent);
		UI::ReplaceWidget(`tabContents, current_tab);
		HPCControl::Buttonstate(); // en-/disable buttons
		Wizard::SetHelpText( HPCNodesSetupDialogHelpText() );
		Wizard::SetBackButton(`backtonfs, _("Back"));
	}

	// install ssh on node
	if	( ret == `copyssh )
	{
		ndscontent = HPCControl::SSHcopy();
		HPCControl::Buttonstate();
	}

	// Add node to cluster
	if	( ret == `addnode )
	{
		ndscontent = HPCControl::AddClusterNode();
		HPCControl::Buttonstate();
	}

	// Remove node from cluster
	if	( ret == `remnode )
	{
		ndscontent = HPCControl::RemoveClusterNode();
		HPCControl::Buttonstate();
	}

	// Inactivate / Activate Buttons in nodes-tab

	if	( ret == `nodestable )
	{
		HPCControl::Buttonstate();
	}

	// Query Tree Items

	if	( ret == `queues )
	{
		itemname = HPCControl::QueryTree();
	}

	// Add Queue Item

	if	( ret == `addqueue )
	{
		HPCControl::AddItem(itemname);
		y2milestone("Add Event");
	}

	// Delete Queue Item

	if	( ret == `deletequeue )
	{
		HPCControl::DeleteItem(itemname);
		y2milestone("Delete Event");
	}

	// Append Queue Item

	if	( ret == `savequeue )
	{
		HPCControl::AppendItem(itemname);
		y2milestone("Append Item");
	}

	// Debugging stuff

	y2milestone ("... ret is %1 ...", ret);


    } until ( false);

Wizard::CloseDialog();

} //end


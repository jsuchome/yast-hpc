/**************
FILE          : HPCDialog.ycp
***************
PROJECT       : YaST2 - Yet another Setup Tool
              :
AUTHOR        : Thomas Hofmann <thofmann@suse.de>
              :
BELONGS TO    : YaST2 - HPC Setup Module
              :
DESCRIPTION   : A module for setting up a HPC-Cluster-Scheduling System
	      :	with necessary environment
              :
STATUS        : Development
**************/
/*! \brief YaST2 - HPC interface (UI part)
*
* File:        HPCDialog.ycp
* Package:     simple Configuration
* Summary:     Main Module started if yast2 simple is called
* Authors:     Thomas Hofmann <thofmann@suse.de>
*/
{  // begin
	textdomain "hpc";

	import "Wizard";
	import "SCR";

	import "HPCControl";
	import "HPCMessages";




//-----------------------------------------
// Setup configuration dialog
//-----------------------------------------


// Server-Tab UI
define term Server_Tab()
``{
	term this_tab = `VBox(	`HSpacing(60),
				`VSpacing(1),
					`HBox(
						`VSpacing(25),
						`VBox(	`HSpacing(50),
							`ReplacePoint(`id(`TreeDialog),HPCControl::queueTree())
						     ),
						`VBox(
							`HBox(
							`TextEntry(`id(`queuevalue),"Value:" ),
							`PushButton(`id(`savequeue),"save changes")),
							`VSpacing(2),
							`PushButton(`id(`addqueue)," Add "),
							`PushButton(`id(`deletequeue),"Delete")
						     )
					      ),
				`VSpacing(1),
				`PushButton(`id( `asettings ), _("edit scheduler config-file"))
			     );
	return this_tab;
};


// Advanced Server-Tab UI
define term Advanced_Tab()
``{
	term this_tab = `VBox(
				`VSpacing(1),
				`HSpacing(70),
				`HBox(
				   `VSpacing(`opt(`vstretch), 18),
					//MultiLineEdit: ID, Label, initial Value
				   `MultiLineEdit(`id(`ExpertsConfiguration),`opt(`notify), "&Edit scheduler Configuration:", HPCControl::HPCSchedConfig()
						 )
				     )//,
//				   `VSpacing(`opt(`vstretch), 1),
//				   `HBox(
//					`PushButton(`id( `ssettings ), _("&Back")),
//					`PushButton(`id( `saveconfig ),`opt(`disabled), _("&Save"))
//					)
				);
	return this_tab;
};


// Nodes-Tab UI
define term Nodes_Tab(list ndscontent)
``{
	term this_tab =	`VBox(
				`VSpacing(1),
				`Frame(_("Nodes Configuration"),
				   `VBox(
					`HSpacing(80),
					`HBox(
						`VSpacing(`opt(`vstretch), 15),
						`Table(`id(`nodestable), `opt(`immediate, `notify), `header (_("IP-Address"),_("ClusterNode"), _("Name"), _("CPUs"), _("status"), _("SSH Access")),
						ndscontent
						      )
					     ),
					`VSpacing(`opt(`vstretch),2),
					`HBox(
						`VBox(
						`PushButton(`id(`addnode), _("Add Node to cluster")),
						`PushButton(`id(`remnode), _("Remove Node from cluster"))
						),
						`HSpacing(`opt(`hstretch), 0.5),
						`ComboBox(`id(`CPUs), _("Choose &Nr of CPUs"),
						[	_("1"),
                                                        _("2"),
                                                        _("3"),
                                                        _("4"),
                                                        _("5"),
                                                        _("6"),
                                                        _("7"),
                                                        _("8")
                                                ]	 ),
						`HSpacing(`opt(`hstretch), 0.5),
						`PushButton(`id(`copyssh), _("Obtain SSH Access"))
					     )
					)
				      )
				);
	return this_tab;
};


//-----------------------------------------
// NFS-Share dialog
//-----------------------------------------
define term CommonWiz(map nfs, term firewallsettings)
``{
	term this_tab =	`VBox(
				`HBox(
				`HVCenter(
						`HVSquash(
							//`VSpacing(`opt(`vstretch), 1),
							`Frame(
								(_("Share Directory Configuration:")),
								`VBox(
									`VSpacing(1),
									`TextEntry(`id(`mountpoint), _("Mountpoint"), (string)nfs["mountpoint"]:"n.a."),
									`VSpacing(0.5),
									`TextEntry(`id(`hosts), _("Hosts"), (string)nfs["hosts"]:"n.a."),
									`VSpacing(0.5),
									`TextEntry(`id(`options), _("Options"), (string)nfs["options"]:"n.a."),
									`VSpacing(0.5)
									)
								)
							)
					),
				`HVCenter(
						`HVSquash(
							`Frame(
								(_("Home Directory Configuration:")),
								`VBox(
									`VSpacing(1),
									`TextEntry(`id(`homepoint), _("Mountpoint"), (string)nfs["homepoint"]:"n.a."),
									`VSpacing(0.5),
									`TextEntry(`id(`hhosts), _("Hosts"), (string)nfs["hhosts"]:"n.a."),
									`VSpacing(0.5),
									`TextEntry(`id(`hoptions), _("Options"), (string)nfs["hoptions"]:"n.a."),
									`VSpacing(0.5)
									)
								)
							)
					)
				    ),
				`HBox(
				`HVCenter(
						`HVSquash(
							`Frame(
								(_("Firewall Configuration:")),
								`VBox( firewallsettings
									)
								)
							)
					),
				`HVCenter(
						`HVSquash(
							`Frame(
								(_("Configuration Progress")),
								`VBox(
									`CheckBox(`id(`NISconfigured),_("NIS already configured"),false),
									`CheckBox(`id(`DHCPconfigured),_("DHCP already configured"),false)
									)
							      )
							 )
					 )
				 )
			      );

	term ret ={
			Wizard::SetContents(
	                _("NFS Configuration"),
	                this_tab,
			HPCMessages::helpTextNFS,
	                false,
	                true
	                );
			Wizard::SetNextButton(`nextnis, _("Next"));
			Wizard::SetAbortButton(`abort, _("Abort"));
		  };
	return ret;
};

//-----------------------------------------
// Pre SC
//-----------------------------------------
define term preSCTabs()
``{
	term this_wiz = `VBox(
			  `Label(_("NIS- and DHCP-Setup have been finished.")),
			  `Label(_("You can start your Cluster-Nodes now in order to get a valid IP-Adress assigned by dhcp-server."))
			      );

	term ret = {
			Wizard::SetContents(
						_("Prepare for PBS Configuration"),
						this_wiz,
						//_("Help Bala Bla"),
						HPCMessages::helpTextbeforeScan,
						true,
						true
					);
			Wizard::SetNextButton(`configSC, _("Detect Nodes"));
			Wizard::SetBackButton(`backtonfs, _("Back"));
			Wizard::SetAbortButton(`abort, _("Abort"));
			};


	return ret;
};



//-----------------------------------------
// Create Tabs
//-----------------------------------------
define term SCTabs(term setup_dialog)
``{
	term this_tab = {
			 Wizard::SetContents(
						_("PBS Server / Client configuration"),
						setup_dialog,
						//_("Configuration of Server and Client Nodes here!"),
						HPCMessages::helpTextServerconfig,
						true,
						true
					    );
			Wizard::SetAbortButton(`abort,_("Abort"));
			Wizard::SetBackButton(`backSC, _("Back"));
			Wizard::SetNextButton(`finalize, _("Finalize"));
			};
	return this_tab;
};


//-----------------------------------------
// Really cancel ? - Dialog
//-----------------------------------------

define boolean reallycancel()
``{
	boolean status = HPCControl::have_changes_check() ;
	boolean abort = Popup::ReallyAbort ( status );
	return abort;
};



//-----------------------------------------
// HPCServerSetupDialogHelpText
//-----------------------------------------

define string HPCServerSetupDialogHelpText ()
``{
	// Help text for ServerClient configuration
	return HPCMessages::helpTextServerconfig;
};


//-----------------------------------------
// HPCAdvancedSetupDialogHelpText
//-----------------------------------------

define string HPCAdvancedSetupDialogHelpText ()
``{
	// Help text for ServerClient configuration
	return HPCMessages::helpTextServerconfig;
};


//-----------------------------------------
// HPCNodesSetupDialogHelpText
//-----------------------------------------
define string HPCNodesSetupDialogHelpText ()
``{
	// Help text for ServerClient configuration
	return HPCMessages::helpTextNodesconfig;
};

//-----------------------------------------
// HPCServicesSetupDialogHelpText
//-----------------------------------------

define string HPCServicesSetupDialogHelpText ()
``{
	// Help text for ServerClient configuration
	return HPCMessages::helpTextServicesconfig;
};

} //end
